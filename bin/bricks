#!/usr/bin/env node
// const path = require('path');
const meow = require('meow');
// const execa = require('execa');
const chalk = require('chalk');
const semver = require('semver');
const pkg = require('../package.json');
const startTaskRunner = require('../utils/startTaskRunner');

// Check node version
if (!semver.satisfies(process.version, pkg.engines.node)) {
  console.error(`${chalk.red`error`} Required node version ${pkg.engines.node} not satisfied with installed version ${process.version}. \n`);
  process.exit(0);
}

const defaultCommand = 'dev';
const commands = new Set([
  'build',
  defaultCommand,
]);

const cli = meow(`
  Usage
    $ bricks <command>

  Commands
    ${Array.from(commands).join(', ')}
`);

let cmd = cli.input[0];

// Check if command exists
if (cmd && !commands.has(cmd)) {
  console.error(`${chalk.red`error`} Command "${cmd}" not found. For more information use the --help flag. \n`);
  process.exit(0);
}

// Use default command if none is given
if (!commands.has(cmd)) {
  cmd = defaultCommand;
}

// Set env
const defaultEnv = cmd === 'dev' ? 'development' : 'production';
process.env.NODE_ENV = process.env.NODE_ENV || defaultEnv;

startTaskRunner();

// const bin = path.join(__dirname, `bricks-${cmd}`);

// execa(bin, { stdio: 'inherit' });
